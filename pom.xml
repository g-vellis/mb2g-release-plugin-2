<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>guru.springframework</groupId>
    <artifactId>mb2g-release-plugin-2</artifactId>
    <packaging>pom</packaging>
    <version>${revision}</version>
    <modules>
        <module>sub-module-1</module>
    </modules>

    <properties>
        <revision>1.1-SNAPSHOT</revision><!-- called Maven CI Friendly Versions -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>11</java.version>
        <maven.compiler.source>${java.version}</maven.compiler.source>
        <maven.compiler.target>${java.version}</maven.compiler.target>
        <junit.version>5.7.0</junit.version>
        <!-- Used along with the "<scm>" element and the "maven-release-plugin" -->
        <project.scm.id>github</project.scm.id> <!-- The value provided here (i.e. server id) needs to match the id of a server inside settings.xml; the credentials of the matching server will be used to sign in to github. -->
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <!-- 
        Useful links to make the revision plugin work within the context of a multi-module project (i.e. properly assign new versions).
            https://maven.apache.org/maven-release/maven-release-plugin/examples/update-versions.html
            https://maven.apache.org/maven-release/maven-release-plugin/examples/non-interactive-release.html# -->
    <!-- mvn clean release:prepare    this prepares the release and does the tagging inside of github and then,
         mvn release:perform        does a build and then it pushes up to packagecloud.
    -->
    <!--
        mvn release:prepare -DdryRun=true   to see what is going to change - no modification to the github, etc.
        mvn release:clean
    -->
    <!-- -->
    <!-- mvn -Drevision=$BUILD_NUMBER deploy scm:tag another way to work versions without using the revision plugin. -->
    <scm>
        <!-- scm:git: ++ the github https url we use to clone the repo. -->
        <developerConnection>scm:git:https://github.com/g-vellis/mb2g-release-plugin-2.git</developerConnection>
        <!-- the repo github url shown in the browser address bar when we visit the homa page of the repo. -->
        <url>https://github.com/g-vellis/mb2g-release-plugin-2</url>
      <tag>HEAD</tag>
  </scm>

    <build>
        <extensions>
            <!-- This is what it's going to enable Maven Wagon to push artifacts up to packagecloud -->
            <extension>
                <groupId>io.packagecloud.maven.wagon</groupId>
                <artifactId>maven-packagecloud-wagon</artifactId>
                <version>0.0.6</version>
            </extension>
        </extensions>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.22.2</version>
            </plugin>
            <!-- replaces the ${revision} placeholder with the actual version value in the installed pom.xml -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>flatten-maven-plugin</artifactId>
                <version>1.2.5</version>
                <configuration>
                    <flattenMode>bom</flattenMode>
                </configuration>
                <executions>
                    <!-- enable flattening -->
                    <execution>
                        <id>flatten</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>flatten</goal>
                        </goals>
                    </execution>
                    <!-- ensure proper cleanup -->
                    <execution>
                        <id>flatten.clean</id>
                        <phase>clean</phase>
                        <goals>
                            <goal>clean</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- required to use the maven-release-plugin, we are still to define the "scm" element -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-release-plugin</artifactId>
                <version>2.5.3</version>
            </plugin>
        </plugins>
    </build>

    <!-- <distributionManagement> is going to tell Maven where to deploy things. -->
    <distributionManagement>
        <repository>
            <id>packagecloud.georgevl_repo.releases</id>
            <!-- the use of the "packagecloud+https" protocol will trigger the "maven-packagecloud-wagon" wagon extension to execute. -->
            <url>packagecloud+https://packagecloud.io/georgevl/release</url>
        </repository>
        <snapshotRepository>
            <id>packagecloud.georgevl_repo.snapshots</id>
            <!-- packagecloud+https will trigger the "maven-packagecloud-wagon" wagon extension. -->
            <url>packagecloud+https://packagecloud.io/georgevl/snapshot</url>
        </snapshotRepository>
    </distributionManagement>

</project>
